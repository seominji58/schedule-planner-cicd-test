[내 일정을 부탁해] MVP 가상 시나리오 및 데이터 설계

====================
1. 가상 인물 및 팀 설정
====================

■ 팀 A: "스마트앱 개발팀" (김개발 소속)
팀장: 김개발 (kim.dev@company.com)
- 역할: 개발팀 팀장, 풀스택 개발자
- 특징: 프로젝트 관리 경험 3년, 일정 관리에 어려움 겪음
- 목표: 팀 일정을 효율적으로 관리하고 마감일 준수

팀원 1: 박프론트 (park.front@company.com)
- 역할: 프론트엔드 개발자
- 특징: React/Next.js 전문가, UI/UX에 민감
- 목표: 사용자 경험 개선에 집중

팀원 2: 이백엔드 (lee.backend@company.com)
- 역할: 백엔드 개발자
- 특징: Node.js/Python 전문가, 데이터베이스 설계 경험
- 목표: 안정적인 API 개발

팀원 3: 최디자인 (choi.design@company.com)
- 역할: UI/UX 디자이너
- 특징: Figma 전문가, 사용자 중심 디자인
- 목표: 직관적인 인터페이스 설계

■ 팀 B: "데이터분석팀" (참고용)
팀장: 정데이터 (jung.data@company.com)
- 역할: 데이터 분석팀 팀장, 데이터 사이언티스트
- 특징: Python/R 전문가, AI/ML 프로젝트 경험

팀원 1: 한분석 (han.analytics@company.com)
- 역할: 데이터 분석가
- 특징: SQL/Tableau 전문가, 비즈니스 인사이트 도출

팀원 2: 송시각화 (song.viz@company.com)
- 역할: 데이터 시각화 전문가
- 특징: D3.js/Chart.js 전문가, 대시보드 설계

====================
2. 핵심 사용 시나리오 (상세)
====================

■ 시나리오 1: 새 프로젝트 시작 및 일정 생성
상황: 스마트앱 개발팀이 새로운 모바일 앱 프로젝트를 시작
행동:
1. 김개발이 프로젝트 정보 입력
   - 프로젝트명: "스마트홈 모바일앱"
   - 마감일: 2024년 3월 31일
   - 팀원: 박프론트, 이백엔드, 최디자인
2. AI가 역산으로 일정 자동 생성
   - 마감일로부터 거꾸로 계산
   - 각 팀원의 역할별 작업 분배
   - 주요 마일스톤 설정
3. 생성된 일정을 팀원들과 공유
4. 구글 캘린더에 동기화

■ 시나리오 2: 일상적인 일정 관리
상황: 진행 중인 프로젝트의 일정 관리
행동:
1. 김개발이 매일 아침 일정 확인
   - 오늘 할 일 목록 확인
   - 진행 중인 작업 상태 업데이트
2. 팀원들이 작업 완료 시 상태 변경
   - 박프론트: "로그인 화면 UI 완료"
   - 이백엔드: "사용자 인증 API 완료"
3. 일정 충돌 발생 시 알림 및 조정
   - 디자인 리뷰와 개발 작업 시간 겹침
   - AI가 대안 일정 제안

■ 시나리오 3: 프로젝트 진행 상황 분석
상황: 월말 프로젝트 진행 상황 점검
행동:
1. 김개발이 프로젝트별 진행률 확인
   - 완료된 일정 vs 전체 일정
   - 팀원별 작업량 분포
2. 시간 분포 분석
   - 개발/디자인/테스트 시간 비율
   - 예상 시간 vs 실제 소요 시간
3. AI 기반 일정 최적화 제안
   - 병목 구간 식별
   - 리소스 재배치 제안

■ 시나리오 4: 일정 충돌 해결
상황: 여러 프로젝트의 일정이 겹치는 상황
행동:
1. 시스템이 일정 충돌 감지
2. 김개발에게 충돌 알림
3. 충돌 해결 옵션 제시
   - 일정 조정
   - 우선순위 변경
   - 리소스 재배치
4. 해결 후 일정 업데이트

====================
3. MVP 데이터 테이블 설계
====================

■ Users 테이블 (사용자 정보)
```typescript
interface User {
  id: string;                    // 사용자 고유 ID
  email: string;                 // 이메일 (로그인용)
  name: string;                  // 이름
  role: string;                  // 역할 (팀장, 개발자, 디자이너 등)
  team: string;                  // 소속 팀 (스마트앱개발팀, 데이터분석팀)
  avatar?: string;               // 프로필 이미지 URL
  google_access_token?: string;  // 구글 캘린더 연동 토큰
  created_at: Date;              // 생성일시
  updated_at: Date;              // 수정일시
}
```

■ Projects 테이블 (프로젝트 정보)
```typescript
interface Project {
  id: string;                    // 프로젝트 고유 ID
  name: string;                  // 프로젝트명
  description: string;           // 프로젝트 설명
  deadline: Date;                // 마감일
  status: 'active' | 'completed' | 'paused'; // 프로젝트 상태
  team: string;                  // 담당 팀
  members: string[];             // 참여 팀원 ID 배열
  created_by: string;            // 생성자 ID
  created_at: Date;              // 생성일시
  updated_at: Date;              // 수정일시
}
```

■ Schedules 테이블 (일정 정보)
```typescript
interface Schedule {
  id: string;                    // 일정 고유 ID
  project_id: string;            // 프로젝트 ID
  title: string;                 // 일정 제목
  description: string;           // 일정 설명
  start_time: Date;              // 시작 시간
  end_time: Date;                // 종료 시간
  assignee: string;              // 담당자 ID
  priority: 'low' | 'medium' | 'high'; // 우선순위
  status: 'pending' | 'in_progress' | 'completed'; // 일정 상태
  type: 'development' | 'design' | 'testing' | 'meeting'; // 일정 유형
  google_event_id?: string;      // 구글 캘린더 이벤트 ID
  created_at: Date;              // 생성일시
  updated_at: Date;              // 수정일시
}
```

■ ScheduleConflicts 테이블 (일정 충돌 정보)
```typescript
interface ScheduleConflict {
  id: string;                    // 충돌 고유 ID
  schedule_id: string;           // 충돌하는 일정 ID
  conflicting_schedule_id: string; // 충돌되는 일정 ID
  conflict_type: 'time_overlap' | 'resource_conflict'; // 충돌 유형
  severity: 'low' | 'medium' | 'high'; // 충돌 심각도
  resolved: boolean;             // 해결 여부
  resolved_at?: Date;            // 해결일시
  created_at: Date;              // 생성일시
}
```

====================
4. MVP 샘플 데이터
====================

■ Users 샘플 데이터
```json
[
  {
    "id": "user_001",
    "email": "kim.dev@company.com",
    "name": "김개발",
    "role": "팀장",
    "team": "스마트앱개발팀",
    "created_at": "2024-01-01T00:00:00Z"
  },
  {
    "id": "user_002",
    "email": "park.front@company.com",
    "name": "박프론트",
    "role": "프론트엔드 개발자",
    "team": "스마트앱개발팀",
    "created_at": "2024-01-01T00:00:00Z"
  },
  {
    "id": "user_003",
    "email": "lee.backend@company.com",
    "name": "이백엔드",
    "role": "백엔드 개발자",
    "team": "스마트앱개발팀",
    "created_at": "2024-01-01T00:00:00Z"
  },
  {
    "id": "user_004",
    "email": "choi.design@company.com",
    "name": "최디자인",
    "role": "UI/UX 디자이너",
    "team": "스마트앱개발팀",
    "created_at": "2024-01-01T00:00:00Z"
  },
  {
    "id": "user_005",
    "email": "jung.data@company.com",
    "name": "정데이터",
    "role": "팀장",
    "team": "데이터분석팀",
    "created_at": "2024-01-01T00:00:00Z"
  },
  {
    "id": "user_006",
    "email": "han.analytics@company.com",
    "name": "한분석",
    "role": "데이터 분석가",
    "team": "데이터분석팀",
    "created_at": "2024-01-01T00:00:00Z"
  },
  {
    "id": "user_007",
    "email": "song.viz@company.com",
    "name": "송시각화",
    "role": "데이터 시각화 전문가",
    "team": "데이터분석팀",
    "created_at": "2024-01-01T00:00:00Z"
  }
]
```

■ Projects 샘플 데이터
```json
[
  {
    "id": "project_001",
    "name": "스마트홈 모바일앱",
    "description": "IoT 기기 제어를 위한 모바일 애플리케이션",
    "deadline": "2024-03-31T23:59:59Z",
    "status": "active",
    "team": "스마트앱개발팀",
    "members": ["user_001", "user_002", "user_003", "user_004"],
    "created_by": "user_001",
    "created_at": "2024-01-15T00:00:00Z"
  },
  {
    "id": "project_002",
    "name": "웹 관리자 대시보드",
    "description": "스마트홈 시스템 관리용 웹 대시보드",
    "deadline": "2024-02-28T23:59:59Z",
    "status": "active",
    "team": "스마트앱개발팀",
    "members": ["user_001", "user_002", "user_003"],
    "created_by": "user_001",
    "created_at": "2024-01-10T00:00:00Z"
  },
  {
    "id": "project_003",
    "name": "사용자 행동 분석 시스템",
    "description": "앱 사용자 행동 데이터 분석 및 인사이트 도출",
    "deadline": "2024-04-15T23:59:59Z",
    "status": "active",
    "team": "데이터분석팀",
    "members": ["user_005", "user_006", "user_007"],
    "created_by": "user_005",
    "created_at": "2024-01-20T00:00:00Z"
  }
]
```

■ Schedules 샘플 데이터 (스마트홈 모바일앱 프로젝트)
```json
[
  {
    "id": "schedule_001",
    "project_id": "project_001",
    "title": "프로젝트 기획 및 요구사항 분석",
    "description": "스마트홈 앱의 기능 요구사항 분석 및 기획서 작성",
    "start_time": "2024-01-15T09:00:00Z",
    "end_time": "2024-01-19T18:00:00Z",
    "assignee": "user_001",
    "priority": "high",
    "status": "completed",
    "type": "meeting",
    "created_at": "2024-01-15T00:00:00Z"
  },
  {
    "id": "schedule_002",
    "project_id": "project_001",
    "title": "UI/UX 디자인 설계",
    "description": "앱의 전체적인 UI/UX 디자인 및 와이어프레임 작성",
    "start_time": "2024-01-22T09:00:00Z",
    "end_time": "2024-02-02T18:00:00Z",
    "assignee": "user_004",
    "priority": "high",
    "status": "in_progress",
    "type": "design",
    "created_at": "2024-01-15T00:00:00Z"
  },
  {
    "id": "schedule_003",
    "project_id": "project_001",
    "title": "백엔드 API 설계",
    "description": "IoT 기기 제어를 위한 REST API 설계 및 문서화",
    "start_time": "2024-01-25T09:00:00Z",
    "end_time": "2024-02-05T18:00:00Z",
    "assignee": "user_003",
    "priority": "high",
    "status": "in_progress",
    "type": "development",
    "created_at": "2024-01-15T00:00:00Z"
  },
  {
    "id": "schedule_004",
    "project_id": "project_001",
    "title": "로그인 화면 UI 개발",
    "description": "사용자 인증을 위한 로그인 화면 UI 구현",
    "start_time": "2024-02-05T09:00:00Z",
    "end_time": "2024-02-09T18:00:00Z",
    "assignee": "user_002",
    "priority": "medium",
    "status": "pending",
    "type": "development",
    "created_at": "2024-01-15T00:00:00Z"
  },
  {
    "id": "schedule_005",
    "project_id": "project_001",
    "title": "사용자 인증 API 개발",
    "description": "JWT 기반 사용자 인증 API 구현",
    "start_time": "2024-02-05T09:00:00Z",
    "end_time": "2024-02-12T18:00:00Z",
    "assignee": "user_003",
    "priority": "medium",
    "status": "pending",
    "type": "development",
    "created_at": "2024-01-15T00:00:00Z"
  }
]
```

====================
5. 시나리오별 데이터 흐름
====================

■ 시나리오 1 실행 시 데이터 흐름
1. 김개발이 프로젝트 생성 → Projects 테이블에 새 레코드 추가
2. AI가 역산 스케줄링 → Schedules 테이블에 15-20개 일정 자동 생성
3. 팀원들에게 일정 공유 → 각 팀원의 구글 캘린더에 동기화

■ 시나리오 2 실행 시 데이터 흐름
1. 일정 상태 업데이트 → Schedules 테이블의 status 필드 변경
2. 충돌 감지 → ScheduleConflicts 테이블에 충돌 정보 기록
3. 충돌 해결 → ScheduleConflicts 테이블의 resolved 필드 업데이트

■ 시나리오 3 실행 시 데이터 흐름
1. 진행률 계산 → Schedules 테이블의 status 기반 통계 생성
2. 시간 분석 → Schedules 테이블의 start_time, end_time 기반 분석
3. AI 최적화 제안 → 기존 데이터 기반 새로운 일정 제안

====================
6. MVP 개발 우선순위
====================

■ Phase 1: 기본 데이터 관리
- Users, Projects, Schedules 테이블 CRUD
- 기본 인증 및 권한 관리

■ Phase 2: 일정 관리 기능
- 일정 생성/수정/삭제
- 상태 관리 및 필터링
- 충돌 감지 및 해결

■ Phase 3: AI 및 연동 기능
- AI 역산 스케줄링
- 구글 캘린더 연동
- 분석 차트

--- END --- 